#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
game.py - Full integrated bot:
- T·∫øt mini (liixi, hoamai, phao, xongdat)
- TX (t√†i/x·ªâu) with buttons + PNG support
- X·ªï s·ªë (/xoso, /chon, auto multi-results, /end)
- B·∫ßu cua (/baucua)
- Free Fire simplified (ST & TC) with button-only UI
- System commands: /menu /help /dangky /diem /top /set /check /lich /tinhyeu /info
- All game results are posted to GROUP_ID
- Uses m.env for BOT_TOKEN and GROUP_ID
"""
import os
import re
import json
import random
import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Optional

from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
)

# --- Load env ---
load_dotenv("m.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID") or 0)
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in m.env")
if not GROUP_ID:
    print("Warning: GROUP_ID not set in m.env. Results will use the chat where command invoked.")

# --- Config & constants ---
IMAGES_DIR = "images"
SAVE_FILE = "game_data.json"
DEFAULT_TX_COUNTDOWN = 10
AUTO_CLOSE_AFTER_LAST_BET = 5
COUNTDOWN_EDIT_INTERVAL = 5
XOSO_DEFAULT_SESSION = 60
XOSO_MIN, XOSO_MAX = 1, 20
XOSO_MAX_CHOICES = 5

MATCHMAKING_MAX_WAIT = 50
LOBBY_SPAWN_SECONDS = 5  # as you wanted 5s into match
PLANE_WAIT = 30
BUY_SECONDS = 15
COMBAT_SECONDS = 75  # 1m15s as requested
MIN_ST_PLAYERS = 1  # you said no minimum

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("gamebot")

# --- In-memory stores (persisted minimally to SAVE_FILE) ---
balances: Dict[int,int] = defaultdict(int)
user_names: Dict[int,str] = {}
leaderboard: Dict[int,int] = defaultdict(int)
tx_sessions = {}   # chat_id -> TxSession
xoso_sessions = {}
baucua_sessions = {}
ff_lobbies = {}

# --- Persistence helpers ---
def load_data():
    try:
        with open(SAVE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        for k,v in data.get("balances",{}).items():
            balances[int(k)] = v
        for k,v in data.get("user_names",{}).items():
            user_names[int(k)] = v
        for k,v in data.get("leaderboard",{}).items():
            leaderboard[int(k)] = v
        logger.info("Loaded data")
    except FileNotFoundError:
        logger.info("No save file")
    except Exception as e:
        logger.exception("Error loading data: %s", e)

def save_data():
    try:
        data = {
            "balances": {str(k): v for k,v in balances.items()},
            "user_names": {str(k): v for k,v in user_names.items()},
            "leaderboard": {str(k): v for k,v in leaderboard.items()},
        }
        with open(SAVE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.exception("Error saving data: %s", e)

# Register periodic save
async def periodic_save_task():
    while True:
        await asyncio.sleep(30)
        save_data()

# --- Utilities ---
AMOUNT_RE = re.compile(r"""^([0-9]+(?:[.,][0-9]+)?)\s*([kKmMtT]?)$""")
SUFFIX_MULT = {"":1,"k":1000,"K":1000,"m":1_000_000,"M":1_000_000,"t":1_000_000_000,"T":1_000_000_000}

def parse_amount(text: str) -> Optional[int]:
    if not text: return None
    s = text.replace(".", "").replace(",", ".").strip()
    m = AMOUNT_RE.match(s)
    if not m: return None
    try:
        num = float(m.group(1))
    except:
        return None
    mult = SUFFIX_MULT.get(m.group(2) or "",1)
    amt = int(num * mult)
    return amt if amt > 0 else None

def fmt_amount(v:int)->str:
    if v>=1_000_000_000: return f"{v/1_000_000_000:.2f}T"
    if v>=1_000_000: return f"{v/1_000_000:.2f}M"
    if v>=1000: return f"{v//1000}k"
    return str(v)

def image_path(name:str)->Optional[str]:
    p = os.path.join(IMAGES_DIR, name)
    return p if os.path.exists(p) else None

async def send_group_or_chat(context: ContextTypes.DEFAULT_TYPE, chat_id:int, text:str, **kwargs):
    """Send to GROUP_ID if set; else send to provided chat_id."""
    target = GROUP_ID or chat_id
    try:
        await context.bot.send_message(target, text, parse_mode=ParseMode.HTML, **kwargs)
    except Exception as e:
        logger.exception("send_group_or_chat error: %s", e)
        # fallback to chat where invoked
        try:
            await context.bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, **kwargs)
        except:
            pass

# --- Command: /menu /help ---
async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_names[uid] = update.effective_user.username or update.effective_user.full_name
    kb = [
        [InlineKeyboardButton("/tx T√†i/X·ªâu", callback_data="menu_tx"),
         InlineKeyboardButton("/xoso X·ªï s·ªë", callback_data="menu_xoso")],
        [InlineKeyboardButton("/baucua B·∫ßu Cua", callback_data="menu_baucua"),
         InlineKeyboardButton("/ff Free Fire", callback_data="menu_ff")],
        [InlineKeyboardButton("/liixi L√¨ x√¨", callback_data="menu_liixi"),
         InlineKeyboardButton("/hoamai Hoa mai", callback_data="menu_hoamai")],
        [InlineKeyboardButton("/dangky ƒêƒÉng k√Ω", callback_data="menu_dangky"),
         InlineKeyboardButton("/diem ƒêi·ªÉm", callback_data="menu_diem")]
    ]
    await update.message.reply_text("üå∏ <b>MENU</b> ‚Äî ch·ªçn m·ªôt m·ª•c", reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.HTML)

async def menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if data == "menu_tx":
        await q.edit_message_text("üé≤ /tx <s·ªë ti·ªÅn>  ‚Äî ƒê·∫∑t T√†i/X·ªâu (s·ª≠ d·ª•ng n√∫t ƒë·ªÉ ch·ªçn)")
    elif data == "menu_xoso":
        await q.edit_message_text("üé∞ /xoso ‚Äî m·ªü phi√™n x·ªï s·ªë 60s. /chon ƒë·ªÉ ch·ªçn.")
    elif data == "menu_baucua":
        await q.edit_message_text("ü¶Ä /baucua ‚Äî m·ªü phi√™n b·∫ßu cua. D√πng n√∫t ch·ªçn linh v·∫≠t.")
    elif data == "menu_ff":
        await q.edit_message_text("üî• /ff ‚Äî m·ªü menu Free Fire (button-only).")
    elif data == "menu_liixi":
        await q.edit_message_text("üßß /liixi ‚Äî nh·∫≠n l√¨ x√¨ ng·∫´u nhi√™n.")
    elif data == "menu_hoamai":
        await q.edit_message_text("üå∫ /hoamai ‚Äî ch√∫c T·∫øt ng·∫´u nhi√™n.")
    elif data == "menu_dangky":
        await handle_dangky_private(q, context)
    elif data == "menu_diem":
        await handle_diem_private(q, context)
    else:
        await q.edit_message_text("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c tri·ªÉn khai.")

# --- dangky / diem / top ---
async def handle_dangky_private(q, context):
    uid = q.from_user.id
    if balances.get(uid,0)>0:
        await q.edit_message_text("B·∫°n ƒë√£ ƒëƒÉng k√Ω.")
        return
    balances[uid] = 100_000
    await q.edit_message_text(f"‚úÖ ƒêƒÉng k√Ω: b·∫°n nh·∫≠n 100k. S·ªë d∆∞: {fmt_amount(balances[uid])}")
    save_data()

async def handle_diem_private(q, context):
    uid = q.from_user.id
    await q.edit_message_text(f"üíº S·ªë d∆∞: {fmt_amount(balances.get(uid,0))}")

async def dangky_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if balances.get(uid,0)>0:
        await update.message.reply_text("B·∫°n ƒë√£ ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥.")
        return
    balances[uid]=100_000
    user_names[uid]=update.effective_user.username or update.effective_user.full_name
    await update.message.reply_text(f"ƒêƒÉng k√Ω th√†nh c√¥ng. S·ªë d∆∞: {fmt_amount(balances[uid])}")
    save_data()

async def diem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(f"S·ªë d∆∞: {fmt_amount(balances.get(uid,0))}")

async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    items = sorted(leaderboard.items(), key=lambda kv: kv[1], reverse=True)[:10]
    if not items:
        await update.message.reply_text("Ch∆∞a c√≥ d·ªØ li·ªáu.")
        return
    lines = ["üèÜ Top leaderboard:"]
    for uid, val in items:
        lines.append(f"{user_names.get(uid,uid)} ‚Äî {fmt_amount(val)}")
    await update.message.reply_text("\n".join(lines))

# --- set / check / lich / tinhyeu / info ---
ADMINS = set()  # populate if needed

def is_admin(uid:int)->bool:
    return uid in ADMINS

async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_admin(uid):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    text = update.message.text or ""
    s_match = re.search(r"s=(\d+)", text)
    bias_match = re.search(r"bias=(\d+)", text)
    global DEFAULT_TX_COUNTDOWN
    if s_match:
        DEFAULT_TX_COUNTDOWN = int(s_match.group(1))
    await update.message.reply_text(f"ƒê√£ c·∫≠p nh·∫≠t: s={DEFAULT_TX_COUNTDOWN}")

async def check_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /check @username")
        return
    uname = context.args[0].lstrip("@")
    try:
        chat = await context.bot.get_chat(f"@{uname}")
        await update.message.reply_text(f"@{uname} => id: {chat.id}")
        return
    except Exception:
        for uid, name in user_names.items():
            if name and name.lstrip("@").lower()==uname.lower():
                await update.message.reply_text(f"@{uname} => id: {uid} (cache)")
                return
    await update.message.reply_text("Kh√¥ng t√¨m th·∫•y.")

async def lich_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    holidays = [("T·∫øt D∆∞∆°ng l·ªãch","2025-01-01"),("T·∫øt Nguy√™n ƒë√°n","2025-01-29"),("Qu·ªëc kh√°nh","2025-09-02")]
    await update.message.reply_text("\n".join([f"{n} ‚Äî {d}" for n,d in holidays]))

async def tinhyeu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args)<2:
        await update.message.reply_text("C√∫ ph√°p: /tinhyeu t√™n1 t√™n2")
        return
    pct = random.choice([10,45,0,98,77, random.randint(0,100)])
    await update.message.reply_text(f"üíñ {context.args[0]} + {context.args[1]} = {pct}%")

async def info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    try:
        members = (await context.bot.get_chat(chat.id)).get_member_count()
    except:
        members = "unknown"
    await update.message.reply_text(f"T√™n: {chat.title or 'private'}\nID: {chat.id}\nTh√†nh vi√™n: {members}")

# ------------------------------
# --- T√ÄI / X·ªàU (button) ---
# ------------------------------
class TxSession:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.bets = []  # list of dict {uid, uname, choice, amount}
        self.end_time = None
        self.last_bet_time = None
        self.countdown = DEFAULT_TX_COUNTDOWN
        self.running = False
        self.previous_result = None
        self._last_edit = None
        self.message_id = None

active_tx: Dict[int, TxSession] = {}

async def tx_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /tx <ti·ªÅn>")
        return
    amount = parse_amount(context.args[0])
    if amount is None:
        await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
        return
    uid = update.effective_user.id
    user_names[uid] = update.effective_user.username or update.effective_user.full_name
    context.user_data["pending_tx_amount"] = amount
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîµ T√†i", callback_data=f"tx|t|{amount}"),
                                InlineKeyboardButton("üî¥ X·ªâu", callback_data=f"tx|x|{amount}")]])
    await update.message.reply_text(f"ƒê·∫∑t {fmt_amount(amount)} ‚Äî ch·ªçn:", reply_markup=kb)

async def tx_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    try:
        _, choice, amount = data.split("|")
        amount = int(amount)
    except:
        await q.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return
    uid = q.from_user.id
    uname = q.from_user.username or q.from_user.full_name
    user_names[uid] = uname
    if balances.get(uid,0) < amount:
        await q.edit_message_text("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn.")
        return
    # deduct and register bet
    balances[uid] -= amount
    chat_id = q.message.chat_id
    session = active_tx.get(chat_id)
    if not session or not session.running:
        # create session
        m = await context.bot.send_message(chat_id, "üé≤ Phi√™n TX b·∫Øt ƒë·∫ßu ‚Äî ch·ªù c∆∞·ª£c...")
        session = TxSession(chat_id)
        session.running = True
        session.end_time = datetime.now() + timedelta(seconds=session.countdown)
        session._last_edit = datetime.now()
        session.message_id = m.message_id
        active_tx[chat_id] = session
        # spawn countdown loop
        asyncio.create_task(run_tx_countdown(context.application, session))
    session.bets.append({"uid":uid,"uname":uname,"choice":choice,"amount":amount})
    session.last_bet_time = datetime.now()
    await q.edit_message_text(f"‚úÖ @{uname} c∆∞·ª£c {'T√†i' if choice=='t' else 'X·ªâu'} {fmt_amount(amount)}")
    save_data()

async def run_tx_countdown(app: Application, session: TxSession):
    chat_id = session.chat_id
    try:
        while session.running:
            now = datetime.now()
            if session.last_bet_time and (now - session.last_bet_time).total_seconds() >= AUTO_CLOSE_AFTER_LAST_BET and session.bets:
                break
            if session.end_time and now >= session.end_time:
                break
            if session._last_edit is None or (now - session._last_edit).total_seconds() >= COUNTDOWN_EDIT_INTERVAL:
                remaining = max(0, int((session.end_time - now).total_seconds())) if session.end_time else session.countdown
                if session.bets:
                    body = "\n".join([f"‚Ä¢ {b['uname']}: {'T√†i' if b['choice']=='t' else 'X·ªâu'} {fmt_amount(b['amount'])}" for b in session.bets])
                else:
                    body = "Ch∆∞a c√≥ ai ƒë·∫∑t c∆∞·ª£c."
                try:
                    await app.bot.edit_message_text(f"‚è≥ Phi√™n TX ‚Äî c√≤n {remaining}s\n{body}", chat_id=chat_id, message_id=session.message_id)
                except:
                    pass
                session._last_edit = now
            await asyncio.sleep(0.6)
    except Exception as e:
        logger.exception("tx countdown error: %s", e)
    await end_tx_session(app, session)

async def end_tx_session(app: Application, session: TxSession):
    session.running = False
    chat_id = session.chat_id
    # choose result (bias simple: 60% repeat previous)
    if session.previous_result and random.random() < 0.6:
        result = session.previous_result
    else:
        dice = [random.randint(1,6) for _ in range(3)]
        s = sum(dice)
        result = "t" if s>=11 else "x"
        session.previous_result = result
    # try send PNG
    png = image_path("tai.png") if result=="t" else image_path("xiu.png")
    if png:
        try:
            await send_group_or_chat(app, chat_id, f"üéâ K·∫øt qu·∫£: {'T√†i' if result=='t' else 'X·ªâu'}")
            with open(png, "rb") as f:
                await app.bot.send_photo(GROUP_ID or chat_id, f)
        except:
            await send_group_or_chat(app, chat_id, f"üéâ KQ: {'T√†i' if result=='t' else 'X·ªâu'}")
    else:
        await send_group_or_chat(app, chat_id, f"üéâ KQ: {'T√†i' if result=='t' else 'X·ªâu'}")
    winners=[]; losers=[]
    for b in session.bets:
        if b['choice']==result:
            payout = b['amount']*2
            balances[b['uid']] += payout
            leaderboard[b['uid']] += (payout - b['amount'])
            winners.append((b['uname'], payout))
        else:
            leaderboard[b['uid']] -= b['amount']
            losers.append((b['uname'], b['amount']))
    lines = [f"üéâ Chi ti·∫øt: {'T√†i' if result=='t' else 'X·ªâu'}"]
    if winners:
        lines.append("üèÜ Th·∫Øng:")
        lines += [f"‚Ä¢ @{u} nh·∫≠n {fmt_amount(p)}" for u,p in winners]
    else:
        lines.append("üèÜ Th·∫Øng: Kh√¥ng ai")
    if losers:
        lines.append("üòû Thua:")
        lines += [f"‚Ä¢ {u} m·∫•t {fmt_amount(a)}" for u,a in losers]
    await send_group_or_chat(app, chat_id, "\n".join(lines))
    active_tx.pop(chat_id, None)
    save_data()

# -----------------------
# --- X·ªî S·ªê
# -----------------------
class XoSoSession:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.picks = {}  # uid -> list of numbers
        self.end_time = None
        self.running = False
        self.message_id = None
        self._last_edit = None

active_xoso: Dict[int, XoSoSession] = {}

async def xoso_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_xoso and active_xoso[chat_id].running:
        await update.message.reply_text("ƒê√£ c√≥ phi√™n X·ªï S·ªë.")
        return
    m = await update.message.reply_text(f"üé∞ X·ªï s·ªë {XOSO_MIN}-{XOSO_MAX} ‚Äî k√©o d√†i {XOSO_DEFAULT_SESSION}s. /chon ƒë·ªÉ tham gia")
    s = XoSoSession(chat_id)
    s.end_time = datetime.now() + timedelta(seconds=XOSO_DEFAULT_SESSION)
    s.running = True
    s.message_id = m.message_id
    s._last_edit = datetime.now()
    active_xoso[chat_id] = s
    asyncio.create_task(run_xoso_countdown(context.application, s))

async def chon_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = active_xoso.get(chat_id)
    if not session or not session.running:
        await update.message.reply_text("Kh√¥ng c√≥ phi√™n x·ªï s·ªë.")
        return
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /chon 1,5 100k")
        return
    nums_raw = context.args[0]
    nums = []
    for s in nums_raw.replace(" ", "").split(","):
        try:
            v = int(s)
            if XOSO_MIN <= v <= XOSO_MAX:
                nums.append(v)
        except:
            pass
    if not nums or len(nums) > XOSO_MAX_CHOICES:
        await update.message.reply_text("S·ªë ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return
    amount = parse_amount(context.args[1]) if len(context.args)>1 else 0
    uid = update.effective_user.id
    user_names[uid] = update.effective_user.username or update.effective_user.full_name
    session.picks[uid] = nums
    await update.message.reply_text(f"‚úÖ @{user_names[uid]} ch·ªçn {nums} v·ªõi {fmt_amount(amount)}")

async def run_xoso_countdown(app: Application, session: XoSoSession):
    chat_id = session.chat_id
    try:
        while session.running:
            now = datetime.now()
            if now >= session.end_time:
                break
            if session._last_edit is None or (now - session._last_edit).total_seconds() >= COUNTDOWN_EDIT_INTERVAL:
                remaining = int((session.end_time - now).total_seconds())
                try:
                    await app.bot.edit_message_text(f"üé∞ X·ªï s·ªë c√≤n {remaining}s ‚Äî ng∆∞·ªùi ƒë√£ ch·ªçn: {len(session.picks)}", chat_id=chat_id, message_id=session.message_id)
                except:
                    pass
                session._last_edit = now
            await asyncio.sleep(1)
    except Exception as e:
        logger.exception("xoso countdown error: %s", e)
    # results: 1..10 random numbers (can duplicate)
    results = [random.randint(XOSO_MIN, XOSO_MAX) for _ in range(random.randint(1,10))]
    winners=[]
    for uid, nums in session.picks.items():
        for r in results:
            if r in nums:
                winners.append((uid, r))
    lines=[f"üéâ KQ x·ªï s·ªë: {results}"]
    if winners:
        for uid,r in winners:
            lines.append(f"‚Ä¢ @{user_names.get(uid,uid)} tr√∫ng {r}")
    else:
        lines.append("Kh√¥ng ai tr√∫ng.")
    await send_group_or_chat(app, chat_id, "\n".join(lines))
    session.running = False
    active_xoso.pop(chat_id, None)

# -----------------------
# --- B·∫¶U CUA
# -----------------------
BAU_CUA = {"bau":"üçê","cua":"ü¶Ä","ca":"üêü","ga":"üêî","nai":"ü¶å","tom":"ü¶û"}
async def baucua_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    kb = [[InlineKeyboardButton(f"{v} {k}", callback_data=f"baucua|{k}") for k,v in BAU_CUA.items()]]
    await update.message.reply_text("Ch·ªçn linh v·∫≠t ƒë·ªÉ ƒë·∫∑t:", reply_markup=InlineKeyboardMarkup(kb))

async def baucua_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split("|")
    if len(parts)<2:
        await q.edit_message_text("T∆∞∆°ng t√°c kh√¥ng h·ª£p l·ªá.")
        return
    choice = parts[1]
    uid = q.from_user.id; uname = q.from_user.username or q.from_user.full_name
    user_names[uid]=uname
    # For demo, default bet 100k
    amt = 100_000
    balances[uid] = balances.get(uid,0) - amt
    await send_group_or_chat(context, q.message.chat_id, f"ü¶Ä @{uname} ƒë·∫∑t {choice} {fmt_amount(amt)}")
    await q.edit_message_text(f"‚úÖ B·∫°n ƒë√£ ƒë·∫∑t {choice} {fmt_amount(amt)}")

# -----------------------
# --- T·∫æT MINI
# -----------------------
async def liixi_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    amt = random.randint(10_000, 200_000)
    balances[uid] = balances.get(uid,0) + amt
    user_names[uid] = update.effective_user.username or update.effective_user.full_name
    await update.message.reply_text(f"üßß B·∫°n nh·∫≠n ƒë∆∞·ª£c l√¨ x√¨ {fmt_amount(amt)}")

async def hoamai_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wishes = ["üå∏ V·∫°n s·ª± nh∆∞ √Ω","üéâ T·∫•n t√†i t·∫•n l·ªôc","üíñ An khang th·ªãnh v∆∞·ª£ng","üçÄ S·ª©c kh·ªèe d·ªìi d√†o"]
    await update.message.reply_text(random.choice(wishes))

async def phao_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üß® BOOM! Ch√∫c m·ª´ng NƒÉm M·ªõi üéÜ")

async def xongdat_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_names:
        await update.message.reply_text("Ch∆∞a c√≥ ai.")
        return
    await update.message.reply_text(f"üëë Ng∆∞·ªùi x√¥ng ƒë·∫•t: {random.choice(list(user_names.values()))}")

# -----------------------
# --- FREE FIRE (ST + TC) simplified with button-only UI
# -----------------------
class FFPlayer:
    def __init__(self, uid:int, uname:str):
        self.user_id = uid
        self.username = uname
        self.hp = 200
        self.medkits = 2
        self.keos = 0
        self.guns = []  # list of weapon keys
        self.pistol = None
        self.alive = True
        self.knocked = False
        self.kills = 0
        self.jumped = False
        self.team = None
        self.money = 0
        self.mp5_level = 0

class FFLobby:
    def __init__(self, chat_id:int, mode:str):
        self.chat_id = chat_id
        self.mode = mode  # 'st' or 'tc'
        self.players: Dict[int, FFPlayer] = {}
        self.started = False
        self.message_id = None
        self.matchmaking_seconds = 0
        self.lock = asyncio.Lock()
        self.map_name = None

ff_lobbies: Dict[int, FFLobby] = {}

def ff_lobby_kb(chat_id:int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ Tham gia", callback_data=f"ff_join|{chat_id}"),
         InlineKeyboardButton("‚ùå R·ªùi", callback_data=f"ff_leave|{chat_id}")],
        [InlineKeyboardButton("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu", callback_data=f"ff_start|{chat_id}")]
    ])

def ff_plane_kb(chat_id:int):
    return InlineKeyboardMarkup([[InlineKeyboardButton("ü™Ç Nh·∫£y", callback_data=f"ff_jump|{chat_id}")]])

def ff_action_kb(chat_id:int, uid:int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî´ B·∫Øn", callback_data=f"ff_shoot|{chat_id}|{uid}"),
         InlineKeyboardButton("üèÉ Ch·∫°y", callback_data=f"ff_run|{chat_id}|{uid}")],
        [InlineKeyboardButton("üß± Keo", callback_data=f"ff_glue|{chat_id}|{uid}"),
         InlineKeyboardButton("‚ù§Ô∏è M√°u", callback_data=f"ff_med|{chat_id}|{uid}")]
    ])

async def ff_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üèù Sinh T·ªìn", callback_data="ff_mode|st"),
         InlineKeyboardButton("‚öîÔ∏è T·ª≠ Chi·∫øn", callback_data="ff_mode|tc")],
        [InlineKeyboardButton("‚≠ê Rank", callback_data="ff_rank")],
    ])
    await update.message.reply_text("üî• Free Fire ‚Äî ch·ªçn ch·∫ø ƒë·ªô", reply_markup=kb)

async def ff_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split("|")
    mode = parts[1]
    chat_id = q.message.chat.id
    # create lobby
    lobby = FFLobby(chat_id, mode)
    uid = q.from_user.id; uname = q.from_user.username or q.from_user.full_name
    lobby.players[uid] = FFPlayer(uid, uname)
    user_names[uid] = uname
    m = await context.bot.send_message(chat_id, f"üéÆ Ph√≤ng FF ({'Sinh t·ªìn' if mode=='st' else 'T·ª≠ chi·∫øn'}) ƒë√£ t·∫°o. Ng∆∞·ªùi ch∆°i: 1", reply_markup=ff_lobby_kb(chat_id))
    lobby.message_id = m.message_id
    ff_lobbies[chat_id] = lobby

async def ff_lobby_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split("|")
    action = parts[0]
    chat_id = int(parts[1])
    lobby = ff_lobbies.get(chat_id)
    if not lobby:
        await q.edit_message_text("Ph√≤ng kh√¥ng t·ªìn t·∫°i.")
        return
    uid = q.from_user.id; uname = q.from_user.username or q.from_user.full_name
    async with lobby.lock:
        if action=="ff_join":
            if uid in lobby.players:
                await q.edit_message_text(f"B·∫°n ƒë√£ ·ªü trong ph√≤ng. T·ªïng: {len(lobby.players)}")
                return
            # assign team if tc
            if lobby.mode=="tc":
                teams = [p.team for p in lobby.players.values() if p.team is not None]
                t0 = teams.count(0); t1 = teams.count(1)
                team = 0 if t0<=t1 else 1
                p = FFPlayer(uid, uname); p.team = team
                lobby.players[uid] = p
            else:
                lobby.players[uid] = FFPlayer(uid, uname)
            user_names[uid]=uname
            await q.edit_message_text(f"‚úÖ @{uname} tham gia. T·ªïng: {len(lobby.players)}", reply_markup=ff_lobby_kb(chat_id))
            return
        if action=="ff_leave":
            if uid in lobby.players:
                lobby.players.pop(uid,None)
                await q.edit_message_text(f"üö™ @{uname} r·ªùi ph√≤ng. T·ªïng: {len(lobby.players)}", reply_markup=ff_lobby_kb(chat_id))
                if not lobby.players:
                    ff_lobbies.pop(chat_id,None)
                return
            else:
                await q.edit_message_text("B·∫°n kh√¥ng ·ªü trong ph√≤ng.")
                return
        if action=="ff_start":
            if lobby.started:
                await q.edit_message_text("Ph√≤ng ƒë√£ b·∫Øt ƒë·∫ßu.")
                return
            lobby.started = True
            await q.edit_message_text("‚è≥ ƒêang gh√©p tr·∫≠n... (random 1..50s)")
            # start matchmaking loop
            asyncio.create_task(ff_matchmaking(context.application, lobby))
            return

async def ff_matchmaking(app: Application, lobby: FFLobby):
    chat_id = lobby.chat_id
    # random wait 1..50
    wait = random.randint(1, MATCHMAKING_MAX_WAIT)
    await asyncio.sleep(wait)
    # proceed to lobby spawn (5s)
    await send_group_or_chat(app, chat_id, f"‚úÖ Gh√©p th√†nh c√¥ng! V√†o s·∫£nh {LOBBY_SPAWN_SECONDS}s...")
    await asyncio.sleep(LOBBY_SPAWN_SECONDS)
    # plane stage
    lobby.map_name = random.choice(["L√†ng Th√¥ng","Th√°p ƒê·ªìng H·ªì","C·ªïng Tr·ªùi","Khu Trung C∆∞","ƒê·∫£o Qu√¢n S·ª±"])
    await send_group_or_chat(app, chat_id, f"‚úàÔ∏è M√°y bay ‚Äî Map: {lobby.map_name}\nü™Ç 30s ƒë·ªÉ nh·∫£y (b·∫•m n√∫t n·∫øu mu·ªën)",)
    # send plane kb once
    try:
        await app.bot.send_message(chat_id, "ü™Ç Nh·∫•n ƒë·ªÉ nh·∫£y", reply_markup=ff_plane_kb(chat_id))
    except:
        pass
    # simulate plane wait but do not spam: announce only a few milestones
    await asyncio.sleep(5)
    await send_group_or_chat(app, chat_id, "‚úàÔ∏è M√°y bay ‚Äî 25s c√≤n l·∫°i")
    await asyncio.sleep(15)
    await send_group_or_chat(app, chat_id, "‚úàÔ∏è M√°y bay ‚Äî 10s c√≤n l·∫°i")
    await asyncio.sleep(8)
    await send_group_or_chat(app, chat_id, "‚úàÔ∏è M√°y bay ‚Äî 2s c√≤n l·∫°i")
    # auto jump those not jumped
    for p in lobby.players.values():
        if not p.jumped:
            p.jumped = True
    await send_group_or_chat(app, chat_id, "ü™Ç T·∫•t c·∫£ ƒë√£ ƒë√°p ƒë·∫•t ‚Äî b·∫Øt ƒë·∫ßu t√¨m ƒë·ªì")
    # loot
    for p in lobby.players.values():
        p.pistol = random.choice(["m500","g18"])
        if random.random()<0.85:
            p.guns.append(random.choice(list(["ak47","scar","m14","mp5","mp40"])))
        await asyncio.sleep(0.05)
    # announce loot summary batched
    lines=["üîé Loot summary:"]
    for p in lobby.players.values():
        lines.append(f"‚Ä¢ @{p.username}: {p.pistol.upper()}" + (f" + {p.guns[0].upper()}" if p.guns else ""))
    await send_group_or_chat(app, chat_id, "\n".join(lines))
    # combat phase (auto)
    await send_group_or_chat(app, chat_id, f"‚öîÔ∏è Combat b·∫Øt ƒë·∫ßu ‚Äî {COMBAT_SECONDS}s")
    start = datetime.now()
    end = start + timedelta(seconds=COMBAT_SECONDS)
    while datetime.now() < end:
        alive = [pl for pl in lobby.players.values() if pl.alive and not pl.knocked]
        if len(alive)<=1:
            break
        attacker = random.choice(alive)
        targets = [t for t in lobby.players.values() if t.user_id!=attacker.user_id and t.alive and not t.knocked]
        if not targets:
            break
        target = random.choice(targets)
        # simulate shot
        dmg = random.randint(15,60)
        target.hp -= dmg
        attacker.kills += 1 if random.random()<0.2 else 0
        if target.hp<=0 and target.alive:
            target.alive=False
            await send_group_or_chat(app, chat_id, f"üî´ @{attacker.username} h·∫° @{target.username} ‚Äî {dmg} dmg")
        await asyncio.sleep(random.uniform(0.5,1.2))
    # determine winner
    survivors = [pl for pl in lobby.players.values() if pl.alive]
    if survivors:
        winner = survivors[0]
        await send_group_or_chat(app, chat_id, f"üèÜ K·∫øt th√∫c ‚Äî Ng∆∞·ªùi s·ªëng s√≥t: @{winner.username}")
    else:
        await send_group_or_chat(app, chat_id, "H√≤a. Kh√¥ng c√≤n ai s·ªëng s√≥t.")
    # cleanup
    ff_lobbies.pop(chat_id, None)

# -----------------------
# --- Callbacks / Routing
# -----------------------
async def global_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q: return
    data = q.data or ""
    # dispatch for menu
    if data.startswith("menu_"):
        return await menu_button(update, context)
    if data.startswith("tx|"):
        return await tx_callback(update, context)
    if data.startswith("baucua|"):
        return await baucua_callback(update, context)
    if data.startswith("ff_mode|"):
        return await ff_mode_callback(update, context)
    if data.startswith("ff_"):
        return await ff_lobby_callback(update, context)
    # fallback
    await q.answer("T∆∞∆°ng t√°c kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c ho·∫∑c ƒë√£ h·∫øt h·∫°n.", show_alert=False)

# -----------------------
# --- Startup / main
# -----------------------
def register_handlers(app: Application):
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CallbackQueryHandler(global_callback))
    # system
    app.add_handler(CommandHandler("dangky", dangky_cmd))
    app.add_handler(CommandHandler("diem", diem_cmd))
    app.add_handler(CommandHandler("top", top_cmd))
    app.add_handler(CommandHandler("set", set_cmd))
    app.add_handler(CommandHandler("check", check_cmd))
    app.add_handler(CommandHandler("lich", lich_cmd))
    app.add_handler(CommandHandler("tinhyeu", tinhyeu_cmd))
    app.add_handler(CommandHandler("info", info_cmd))
    # TX, Xoso, Baucua
    app.add_handler(CommandHandler("tx", tx_cmd))
    app.add_handler(CommandHandler("xoso", xoso_cmd))
    app.add_handler(CommandHandler("chon", chon_cmd))
    app.add_handler(CommandHandler("baucua", baucua_cmd))
    # T·∫øt
    app.add_handler(CommandHandler("liixi", liixi_cmd))
    app.add_handler(CommandHandler("hoamai", hoamai_cmd))
    app.add_handler(CommandHandler("phao", phao_cmd))
    app.add_handler(CommandHandler("xongdat", xongdat_cmd))
    # FF
    app.add_handler(CommandHandler("ff", ff_cmd))
    # free text fallback to notify group
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), lambda u,c: None))

async def on_startup(app: Application):
    logger.info("Starting periodic save task")
    app.create_task(periodic_save_task())

def main():
    load_data()
    app = Application.builder().token(BOT_TOKEN).build()
    register_handlers(app)
    app.add_handler(CallbackQueryHandler(global_callback))
    app.post_init(on_startup)
    logger.info("Bot starting...")
    app.run_polling()

if __name__ == "__main__":
    main()